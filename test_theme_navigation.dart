// test_theme_navigation.dart
// Script pour tester la navigation g√©n√©rique des th√®mes

import 'dart:convert';

import 'package:http/http.dart' as http;


import 'lib/constants/theme_ids.dart';
import 'lib/constants/theme_subcategories.dart';

void main() async {
  print('üß™ Test de la navigation g√©n√©rique des th√®mes\n');
  
  // 1. V√©rifier la coh√©rence entre themeIds et themeSubcategories
  await testThemeConsistency();
  
  // 2. Tester quelques th√®mes avec l'API
  await testThemeApiCalls();
  
  // 3. V√©rifier les sous-cat√©gories
  await testSubcategoryMapping();
  
  print('\n‚úÖ Tests termin√©s');
}

Future<void> testThemeConsistency() async {
  print('üîç Test 1: Coh√©rence des donn√©es de th√®mes');
  print('=' * 50);
  
  final themesWithIds = themeIds.keys.toSet();
  final themesWithSubcategories = themeSubcategories.keys.toSet();
  
  print('üìä Th√®mes avec IDs: ${themesWithIds.length}');
  print('üìä Th√®mes avec sous-cat√©gories: ${themesWithSubcategories.length}');
  
  // Th√®mes qui ont des IDs mais pas de sous-cat√©gories
  final missingSubcategories = themesWithIds.difference(themesWithSubcategories);
  if (missingSubcategories.isNotEmpty) {
    print('‚ö†Ô∏è  Th√®mes sans sous-cat√©gories: $missingSubcategories');
  }
  
  // Th√®mes qui ont des sous-cat√©gories mais pas d'IDs
  final missingIds = themesWithSubcategories.difference(themesWithIds);
  if (missingIds.isNotEmpty) {
    print('‚ö†Ô∏è  Th√®mes sans IDs: $missingIds');
  }
  
  // Th√®mes complets (ID + sous-cat√©gories)
  final completeThemes = themesWithIds.intersection(themesWithSubcategories);
  print('‚úÖ Th√®mes complets: ${completeThemes.length}');
  
  for (final theme in completeThemes.take(5)) {
    final subcategoryCount = themeSubcategories[theme]?.length ?? 0;
    print('  ‚Ä¢ $theme: $subcategoryCount sous-cat√©gories');
  }
  
  print('');
}

Future<void> testThemeApiCalls() async {
  print('üåê Test 2: Appels API des th√®mes');
  print('=' * 50);
  
  // Tester quelques th√®mes
  final testThemes = ['Pri√®re', 'Tawhid', 'Ramadan'];
  
  for (final themeName in testThemes) {
    final themeId = getThemeId(themeName);
    if (themeId == null) {
      print('‚ùå $themeName: ID non trouv√©');
      continue;
    }
    
    try {
      final url = Uri.parse('https://3ilmnafi3.digilocx.fr/api/videos/isvalid/theme/$themeId');
      print('üì° Test API pour $themeName (ID: ${themeId.substring(0, 8)}...)');
      
      final response = await http.get(url);
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final videoCount = (data['data'] as List?)?.length ?? 0;
        print('‚úÖ $themeName: $videoCount vid√©os trouv√©es');
      } else {
        print('‚ùå $themeName: Erreur ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå $themeName: Erreur r√©seau - $e');
    }
  }
  
  print('');
}

Future<void> testSubcategoryMapping() async {
  print('üìã Test 3: Mapping des sous-cat√©gories');
  print('=' * 50);
  
  var totalSubcategories = 0;
  var themeCount = 0;
  
  for (final entry in themeSubcategories.entries) {
    final themeName = entry.key;
    final subcategories = entry.value;
    
    totalSubcategories += subcategories.length;
    themeCount++;
    
    // V√©rifier si le th√®me a un ID
    final hasId = hasThemeId(themeName);
    final status = hasId ? '‚úÖ' : '‚ö†Ô∏è';
    
    if (themeCount <= 10) { // Afficher seulement les 10 premiers pour ne pas surcharger
      print('$status $themeName: ${subcategories.length} sous-cat√©gories${hasId ? '' : ' (pas d\'ID)'}');
    }
  }
  
  print('\nüìä R√©sum√©:');
  print('  ‚Ä¢ Total th√®mes: $themeCount');
  print('  ‚Ä¢ Total sous-cat√©gories: $totalSubcategories');
  print('  ‚Ä¢ Moyenne: ${(totalSubcategories / themeCount).toStringAsFixed(1)} sous-cat√©gories/th√®me');
  
  print('');
}

// Import simul√© des fonctions (normalement depuis le vrai fichier)
String? getThemeId(String themeName) {
  return themeIds[themeName];
}

bool hasThemeId(String themeName) {
  final id = themeIds[themeName];
  return id != null && id.isNotEmpty;
}
